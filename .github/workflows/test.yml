name: CI

on: [push]

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1

  #       # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
  #     - uses: actions/cache@v2
  #       with:
  #         # In order:
  #         # * Module download cache
  #         # * Build cache (Linux)
  #         # * Build cache (Mac)
  #         # * Build cache (Windows)
  #         path: |
  #           ~/go/pkg/mod
  #           ~/.cache/go-build
  #           ~/Library/Caches/go-build
  #           %LocalAppData%\go-build
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Setup Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: "1.17.3"
  #     - name: Lint
  #       run: go vet ./...

  #     - name: Test
  #       run: go test ./...

  # golangci-lint:
  #   name: Go Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v2
  #       timeout-minutes: 5
  #       with:
  #         version: v1.39
  #         args: --timeout 2m

  linux-installs:
    name: assume installs and runs on linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.3"
      - name: install granted
        run: make cli
      - name: build test browser
        run: make test-browser-binary
      - name: set default browser
        # configures granted to use the test browser binary
        run: dgranted browser set -b chrome -p ./bin/tbrowser
      - name: setup aws config files
        run: mkdir ~/.aws; touch ~/.aws/config; touch ~/.aws/credentials;
      - name: setup fake aws profile
        run: |
          cat << EOF >> ~/.aws/config
          [profile test]
          region = ap-southeast-2
          EOF
      - name: setup fake aws profile credentials
        run: |
          cat << EOF >> ~/.aws/credentials
          [test]
          aws_access_key_id=1234578910abcdefghij
          aws_secret_access_key=1234578910abcdefghijklmnopqrstuvwxyz1234
          EOF
      - name: bash
        run: SHELL=/bin/bash dassume -auto-configure-shell
        shell: bash
      - name: bash assume
        run: SHELL=/bin/bash dassume test
        shell: bash
      - name: Install zsh
        run: sudo apt-get update; sudo apt-get install zsh
      - name: zsh
        run: SHELL=/bin/zsh dassume -auto-configure-shell
        shell: zsh {0}
      - name: zsh assume
        run: SHELL=/bin/zsh dassume test
        shell: zsh {0}
      - name: install fish
        run: sudo apt-add-repository ppa:fish-shell/release-3; sudo apt update; sudo apt install fish
      - name: fish
        run: SHELL=fish dassume -auto-configure-shell
        shell: fish {0}
      - name: fish assume
        run: SHELL=fish dassume test
        shell: fish {0}
